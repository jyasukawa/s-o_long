＜makefileエラー＞
makeについて、各オブジェクトのコンパイル時にCFLAGSをつけ忘れていて、Warningが残っていました。CFLAGSを有効にした場合は別のエラーが出てきたため、コンパイル不可として`Invalid compilation` としています。
'make clean' で全てのオブジェクトファイルが消えてなかったので、Invalid compilation（?）フラグをつけました。

＜グッドアイデア＞
structの初期化に: (t_map){0};　を使えるのでぜひやってみてください。
エラーマップを用意されてとても良かったです
エラーファイルがたくさん用意されていてチェックのしやすいレビューでした。
自分の実装ではmapのサイズに上限を掛けた
マップサイズが大きいとセグフォしましたが、マップサイズを制限すると自由度が失われるので意図的に制限はしなかったというディフェンスに納得したのでフラグは立てませんでした
mapのエラー処理のコードは関数によって成功・失敗のリターン値が0と1が混在していていたため改善の余地はある
極力mallocを使わない方が良いという前提

<エラーハンドリング>
Cタイルが0個のとき弾かれませんでした(クリアはできました)。
構成ファイル名が".ber"のとき弾かれませんでした
(1) "."を含まないファイル名を指定するとSEGV 
(2) 存在しないファイル名を指定するとSEGV 
(3) "***.txt.ber" のように、".ber"で終わっているがそれより前にも"."があるファイルを指定するとエラーになる *** ファイルにアクセスするという行為はなるべくならやりたくないので、readする前にわかるエラーはreadする前に、可能ならopenする前に処理してしまいたいところですね。
mlx_xpm_file_to_imageのエラー処理をしていないので、誤ったfile pathを渡すと、 segmentation fault します。 変数名を省略していて読みにくかったです。 convert_mapでmapのconvertとバリデートがされていてテストしずらい気がしました。 関数の戻り値がなくて関数の役割が分かりにくい気がします 至る所でexitしていて、テストしにくい気がします。 エラーは標準エラー出力に出すといいと思います
壁とゴールでアイテムが囲まれている際にerrorと出力されなかった
空ファイルを指定した場合にSegmentation faultしてしまった
ファイルが0 byteだった際に読み込みがうまくいかずセグフォしてしまう
get_next_lineのfree漏れがあったためleaksと判定しました。
MiniLibXをリポジトリの中に含んでいなかったため、コンパイルができませんでした
一つしか許容されていない文字の処理や壁が欠けていたときの処理、ゴールや収集物が確保できるかの判定処理について
全部Cを取らなくてもゴールできてしまっていたため、その項目をNOにしました
空白行があるとセグフォしてしまいましたのでCrashフラグを付けさせていただきます。おそらく再帰関数を使っているため、メモリ？を使い果たしたものと思われます。マップのサイズに上限を付ければ直るかもしれません
...空白行を含む構成ファイルを読み込んだときにセグフォする。適切な処理を加える。 極端に大量のデータが書かれた構成ファイルを読み込んだときにセグフォする。コードの中で再帰を使っており大量のデータを読み込むとスタックオーバーフローするため、読み込むデータの上限を設定する。 他：構成ファイルに書かれたマップが大きく画面が見切れた場合に、ゲームがplayableでないと評価される可能性が0ではないため、ウィンドウのサイズの上限を設定する。
引数の数のエラー処理は２以外の時にしたほうがいいと思います。
①Cのみ（Pなし）, Empty, 改行のみ1,2linesのマップでsegvしました。 ②Exitがないマップでゲームが開始しました。 ③Goalした時点でSTEPをcountした方が良いかもしれません。 （④mlx_imgのNULL対応）
player, exitが１つじゃないときも有効なマップとして処理されていました。
map の中にmap 対象の文字でない文字が含まれていた時に、エラーが返せていませんでした。
strchr(filepath, '.') で拡張子の始まる箇所を検索していたので､pdf1.pdf1.ber などのケースでエラーという風に判定していた
ウィンドウを最小化した後に再表示されませんでした
mapのvalidation　 `1`で囲まれていないmap `E`がマップの端に存在する）でプレイできました。周囲が1以外（E, C, N）で構成されていてもplayできてしまうようです。
errorのときもgnlを全て読み切って（freeして）からexitするとleaksが解消されました。 リトライ頑張ってください！
...gnlはstaticだから、リークの管理が難しい！！！
map.ber に空行がある時に str=gnl() で leak していました。error flag が立っているかどうかに関わらず、free() するか最後まで読むかのどちらかがよさそうです。
error message は stderr に出力するのがいいでしょう
destroy imageを使うべきな気がします
exitの使い方はエラーの種類によって変えるといいと思います
WSAD以外のキーを押した場合にもカウントされていました
一つ言うならば、mlx系の関数は失敗した場合にNULLを返すことが多いので、チェックしてあげるのもいいかもしれません。詳しくはmanに書いてあります。
mlx_init()とか、mlx_xpm_file_to_image()は失敗する可能性があるので、エラーハンドリングを入れるといいと思います。
再帰処理のスタックオーバーフロー
Parsingのテストにおいて、ファイルを読み込まなかった場合の終了処理時に、SEGVしました。また、マップの横幅が3のマップも一律エラー扱いされており、修正が必要です。 mlx_loop_hookで呼ばれる関数内で毎回同じmlx_hookを実行している点、WASDキーの割り当てが不自然な点、画面がチカチカする点が気になりました。
".ber" で終わらないファイルの時に予想と違うエラーメッセージでした